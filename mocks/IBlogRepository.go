// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	blogpkg "github.com/Amaankaa/Blog-Starter-Project/Domain/blog"

	mock "github.com/stretchr/testify/mock"
)

// IBlogRepository is an autogenerated mock type for the IBlogRepository type
type IBlogRepository struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: blog
func (_m *IBlogRepository) CreateBlog(blog *blogpkg.Blog) (*blogpkg.Blog, error) {
	ret := _m.Called(blog)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 *blogpkg.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(*blogpkg.Blog) (*blogpkg.Blog, error)); ok {
		return rf(blog)
	}
	if rf, ok := ret.Get(0).(func(*blogpkg.Blog) *blogpkg.Blog); ok {
		r0 = rf(blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blogpkg.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(*blogpkg.Blog) error); ok {
		r1 = rf(blog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBlog provides a mock function with given fields: id
func (_m *IBlogRepository) DeleteBlog(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByTags provides a mock function with given fields: ctx, tags, pagination
func (_m *IBlogRepository) FilterByTags(ctx context.Context, tags []string, pagination blogpkg.PaginationRequest) (blogpkg.PaginationResponse, error) {
	ret := _m.Called(ctx, tags, pagination)

	if len(ret) == 0 {
		panic("no return value specified for FilterByTags")
	}

	var r0 blogpkg.PaginationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, blogpkg.PaginationRequest) (blogpkg.PaginationResponse, error)); ok {
		return rf(ctx, tags, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, blogpkg.PaginationRequest) blogpkg.PaginationResponse); ok {
		r0 = rf(ctx, tags, pagination)
	} else {
		r0 = ret.Get(0).(blogpkg.PaginationResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, blogpkg.PaginationRequest) error); ok {
		r1 = rf(ctx, tags, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBlogs provides a mock function with given fields: ctx, pagination
func (_m *IBlogRepository) GetAllBlogs(ctx context.Context, pagination blogpkg.PaginationRequest) (blogpkg.PaginationResponse, error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBlogs")
	}

	var r0 blogpkg.PaginationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, blogpkg.PaginationRequest) (blogpkg.PaginationResponse, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, blogpkg.PaginationRequest) blogpkg.PaginationResponse); ok {
		r0 = rf(ctx, pagination)
	} else {
		r0 = ret.Get(0).(blogpkg.PaginationResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, blogpkg.PaginationRequest) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogByID provides a mock function with given fields: id
func (_m *IBlogRepository) GetBlogByID(id string) (*blogpkg.Blog, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogByID")
	}

	var r0 *blogpkg.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*blogpkg.Blog, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *blogpkg.Blog); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blogpkg.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchBlogs provides a mock function with given fields: ctx, query, pagination
func (_m *IBlogRepository) SearchBlogs(ctx context.Context, query string, pagination blogpkg.PaginationRequest) (blogpkg.PaginationResponse, error) {
	ret := _m.Called(ctx, query, pagination)

	if len(ret) == 0 {
		panic("no return value specified for SearchBlogs")
	}

	var r0 blogpkg.PaginationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, blogpkg.PaginationRequest) (blogpkg.PaginationResponse, error)); ok {
		return rf(ctx, query, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, blogpkg.PaginationRequest) blogpkg.PaginationResponse); ok {
		r0 = rf(ctx, query, pagination)
	} else {
		r0 = ret.Get(0).(blogpkg.PaginationResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, blogpkg.PaginationRequest) error); ok {
		r1 = rf(ctx, query, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBlog provides a mock function with given fields: id, blog
func (_m *IBlogRepository) UpdateBlog(id string, blog *blogpkg.Blog) (*blogpkg.Blog, error) {
	ret := _m.Called(id, blog)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlog")
	}

	var r0 *blogpkg.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *blogpkg.Blog) (*blogpkg.Blog, error)); ok {
		return rf(id, blog)
	}
	if rf, ok := ret.Get(0).(func(string, *blogpkg.Blog) *blogpkg.Blog); ok {
		r0 = rf(id, blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blogpkg.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *blogpkg.Blog) error); ok {
		r1 = rf(id, blog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIBlogRepository creates a new instance of IBlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBlogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBlogRepository {
	mock := &IBlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
