// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	AI "github.com/Amaankaa/Blog-Starter-Project/Domain/AI"

	mock "github.com/stretchr/testify/mock"
)

// IAIUseCase is an autogenerated mock type for the IAIUseCase type
type IAIUseCase struct {
	mock.Mock
}

// GenerateContentSuggestions provides a mock function with given fields: ctx, req
func (_m *IAIUseCase) GenerateContentSuggestions(ctx context.Context, req *AI.AIRequest) (*AI.AIResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GenerateContentSuggestions")
	}

	var r0 *AI.AIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *AI.AIRequest) (*AI.AIResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *AI.AIRequest) *AI.AIResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AI.AIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *AI.AIRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAIUseCase creates a new instance of IAIUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAIUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAIUseCase {
	mock := &IAIUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
